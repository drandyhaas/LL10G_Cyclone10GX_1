// address_decoder_top_altera_mm_interconnect_1920_tgojdoy.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.4 79

`timescale 1 ps / 1 ps
module address_decoder_top_altera_mm_interconnect_1920_tgojdoy (
		input  wire [31:0] master_avalon_universal_master_0_address,             //       master_avalon_universal_master_0.address
		output wire        master_avalon_universal_master_0_waitrequest,         //                                       .waitrequest
		input  wire [2:0]  master_avalon_universal_master_0_burstcount,          //                                       .burstcount
		input  wire [3:0]  master_avalon_universal_master_0_byteenable,          //                                       .byteenable
		input  wire        master_avalon_universal_master_0_read,                //                                       .read
		output wire [31:0] master_avalon_universal_master_0_readdata,            //                                       .readdata
		output wire        master_avalon_universal_master_0_readdatavalid,       //                                       .readdatavalid
		input  wire        master_avalon_universal_master_0_write,               //                                       .write
		input  wire [31:0] master_avalon_universal_master_0_writedata,           //                                       .writedata
		input  wire        master_avalon_universal_master_0_lock,                //                                       .lock
		input  wire        master_avalon_universal_master_0_debugaccess,         //                                       .debugaccess
		output wire [19:0] multi_channel_avalon_universal_slave_0_address,       // multi_channel_avalon_universal_slave_0.address
		output wire        multi_channel_avalon_universal_slave_0_write,         //                                       .write
		output wire        multi_channel_avalon_universal_slave_0_read,          //                                       .read
		input  wire [31:0] multi_channel_avalon_universal_slave_0_readdata,      //                                       .readdata
		output wire [31:0] multi_channel_avalon_universal_slave_0_writedata,     //                                       .writedata
		output wire [2:0]  multi_channel_avalon_universal_slave_0_burstcount,    //                                       .burstcount
		output wire [3:0]  multi_channel_avalon_universal_slave_0_byteenable,    //                                       .byteenable
		input  wire        multi_channel_avalon_universal_slave_0_readdatavalid, //                                       .readdatavalid
		input  wire        multi_channel_avalon_universal_slave_0_waitrequest,   //                                       .waitrequest
		output wire        multi_channel_avalon_universal_slave_0_lock,          //                                       .lock
		output wire        multi_channel_avalon_universal_slave_0_debugaccess,   //                                       .debugaccess
		output wire [16:0] mm_clock_crossing_bridge_s0_address,                  //            mm_clock_crossing_bridge_s0.address
		output wire        mm_clock_crossing_bridge_s0_write,                    //                                       .write
		output wire        mm_clock_crossing_bridge_s0_read,                     //                                       .read
		input  wire [31:0] mm_clock_crossing_bridge_s0_readdata,                 //                                       .readdata
		output wire [31:0] mm_clock_crossing_bridge_s0_writedata,                //                                       .writedata
		output wire [0:0]  mm_clock_crossing_bridge_s0_burstcount,               //                                       .burstcount
		output wire [3:0]  mm_clock_crossing_bridge_s0_byteenable,               //                                       .byteenable
		input  wire        mm_clock_crossing_bridge_s0_readdatavalid,            //                                       .readdatavalid
		input  wire        mm_clock_crossing_bridge_s0_waitrequest,              //                                       .waitrequest
		output wire        mm_clock_crossing_bridge_s0_debugaccess,              //                                       .debugaccess
		input  wire        master_reset_reset_bridge_in_reset_reset,             //     master_reset_reset_bridge_in_reset.reset
		input  wire        csr_clk_clk_clk                                       //                            csr_clk_clk.clk
	);

	wire          master_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest;   // master_avalon_universal_master_0_agent:av_waitrequest -> master_avalon_universal_master_0_translator:uav_waitrequest
	wire   [31:0] master_avalon_universal_master_0_translator_avalon_universal_master_0_readdata;      // master_avalon_universal_master_0_agent:av_readdata -> master_avalon_universal_master_0_translator:uav_readdata
	wire          master_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess;   // master_avalon_universal_master_0_translator:uav_debugaccess -> master_avalon_universal_master_0_agent:av_debugaccess
	wire   [31:0] master_avalon_universal_master_0_translator_avalon_universal_master_0_address;       // master_avalon_universal_master_0_translator:uav_address -> master_avalon_universal_master_0_agent:av_address
	wire          master_avalon_universal_master_0_translator_avalon_universal_master_0_read;          // master_avalon_universal_master_0_translator:uav_read -> master_avalon_universal_master_0_agent:av_read
	wire    [3:0] master_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable;    // master_avalon_universal_master_0_translator:uav_byteenable -> master_avalon_universal_master_0_agent:av_byteenable
	wire          master_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid; // master_avalon_universal_master_0_agent:av_readdatavalid -> master_avalon_universal_master_0_translator:uav_readdatavalid
	wire          master_avalon_universal_master_0_translator_avalon_universal_master_0_lock;          // master_avalon_universal_master_0_translator:uav_lock -> master_avalon_universal_master_0_agent:av_lock
	wire          master_avalon_universal_master_0_translator_avalon_universal_master_0_write;         // master_avalon_universal_master_0_translator:uav_write -> master_avalon_universal_master_0_agent:av_write
	wire   [31:0] master_avalon_universal_master_0_translator_avalon_universal_master_0_writedata;     // master_avalon_universal_master_0_translator:uav_writedata -> master_avalon_universal_master_0_agent:av_writedata
	wire    [2:0] master_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount;    // master_avalon_universal_master_0_translator:uav_burstcount -> master_avalon_universal_master_0_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                   // rsp_mux:src_valid -> master_avalon_universal_master_0_agent:rp_valid
	wire  [123:0] rsp_mux_src_data;                                                                    // rsp_mux:src_data -> master_avalon_universal_master_0_agent:rp_data
	wire          rsp_mux_src_ready;                                                                   // master_avalon_universal_master_0_agent:rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                                 // rsp_mux:src_channel -> master_avalon_universal_master_0_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                           // rsp_mux:src_startofpacket -> master_avalon_universal_master_0_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                             // rsp_mux:src_endofpacket -> master_avalon_universal_master_0_agent:rp_endofpacket
	wire   [31:0] multi_channel_avalon_universal_slave_0_agent_m0_readdata;                            // multi_channel_avalon_universal_slave_0_translator:uav_readdata -> multi_channel_avalon_universal_slave_0_agent:m0_readdata
	wire          multi_channel_avalon_universal_slave_0_agent_m0_waitrequest;                         // multi_channel_avalon_universal_slave_0_translator:uav_waitrequest -> multi_channel_avalon_universal_slave_0_agent:m0_waitrequest
	wire          multi_channel_avalon_universal_slave_0_agent_m0_debugaccess;                         // multi_channel_avalon_universal_slave_0_agent:m0_debugaccess -> multi_channel_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [31:0] multi_channel_avalon_universal_slave_0_agent_m0_address;                             // multi_channel_avalon_universal_slave_0_agent:m0_address -> multi_channel_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] multi_channel_avalon_universal_slave_0_agent_m0_byteenable;                          // multi_channel_avalon_universal_slave_0_agent:m0_byteenable -> multi_channel_avalon_universal_slave_0_translator:uav_byteenable
	wire          multi_channel_avalon_universal_slave_0_agent_m0_read;                                // multi_channel_avalon_universal_slave_0_agent:m0_read -> multi_channel_avalon_universal_slave_0_translator:uav_read
	wire          multi_channel_avalon_universal_slave_0_agent_m0_readdatavalid;                       // multi_channel_avalon_universal_slave_0_translator:uav_readdatavalid -> multi_channel_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          multi_channel_avalon_universal_slave_0_agent_m0_lock;                                // multi_channel_avalon_universal_slave_0_agent:m0_lock -> multi_channel_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] multi_channel_avalon_universal_slave_0_agent_m0_writedata;                           // multi_channel_avalon_universal_slave_0_agent:m0_writedata -> multi_channel_avalon_universal_slave_0_translator:uav_writedata
	wire          multi_channel_avalon_universal_slave_0_agent_m0_write;                               // multi_channel_avalon_universal_slave_0_agent:m0_write -> multi_channel_avalon_universal_slave_0_translator:uav_write
	wire    [2:0] multi_channel_avalon_universal_slave_0_agent_m0_burstcount;                          // multi_channel_avalon_universal_slave_0_agent:m0_burstcount -> multi_channel_avalon_universal_slave_0_translator:uav_burstcount
	wire          multi_channel_avalon_universal_slave_0_agent_rf_source_valid;                        // multi_channel_avalon_universal_slave_0_agent:rf_source_valid -> multi_channel_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [124:0] multi_channel_avalon_universal_slave_0_agent_rf_source_data;                         // multi_channel_avalon_universal_slave_0_agent:rf_source_data -> multi_channel_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          multi_channel_avalon_universal_slave_0_agent_rf_source_ready;                        // multi_channel_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> multi_channel_avalon_universal_slave_0_agent:rf_source_ready
	wire          multi_channel_avalon_universal_slave_0_agent_rf_source_startofpacket;                // multi_channel_avalon_universal_slave_0_agent:rf_source_startofpacket -> multi_channel_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          multi_channel_avalon_universal_slave_0_agent_rf_source_endofpacket;                  // multi_channel_avalon_universal_slave_0_agent:rf_source_endofpacket -> multi_channel_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                     // multi_channel_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> multi_channel_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [124:0] multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_data;                      // multi_channel_avalon_universal_slave_0_agent_rsp_fifo:out_data -> multi_channel_avalon_universal_slave_0_agent:rf_sink_data
	wire          multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                     // multi_channel_avalon_universal_slave_0_agent:rf_sink_ready -> multi_channel_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;             // multi_channel_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> multi_channel_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;               // multi_channel_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> multi_channel_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          multi_channel_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                   // multi_channel_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> multi_channel_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] multi_channel_avalon_universal_slave_0_agent_rdata_fifo_src_data;                    // multi_channel_avalon_universal_slave_0_agent:rdata_fifo_src_data -> multi_channel_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          multi_channel_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                   // multi_channel_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> multi_channel_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                   // cmd_mux:src_valid -> multi_channel_avalon_universal_slave_0_agent:cp_valid
	wire  [123:0] cmd_mux_src_data;                                                                    // cmd_mux:src_data -> multi_channel_avalon_universal_slave_0_agent:cp_data
	wire          cmd_mux_src_ready;                                                                   // multi_channel_avalon_universal_slave_0_agent:cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                                 // cmd_mux:src_channel -> multi_channel_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                           // cmd_mux:src_startofpacket -> multi_channel_avalon_universal_slave_0_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                             // cmd_mux:src_endofpacket -> multi_channel_avalon_universal_slave_0_agent:cp_endofpacket
	wire   [31:0] mm_clock_crossing_bridge_s0_agent_m0_readdata;                                       // mm_clock_crossing_bridge_s0_translator:uav_readdata -> mm_clock_crossing_bridge_s0_agent:m0_readdata
	wire          mm_clock_crossing_bridge_s0_agent_m0_waitrequest;                                    // mm_clock_crossing_bridge_s0_translator:uav_waitrequest -> mm_clock_crossing_bridge_s0_agent:m0_waitrequest
	wire          mm_clock_crossing_bridge_s0_agent_m0_debugaccess;                                    // mm_clock_crossing_bridge_s0_agent:m0_debugaccess -> mm_clock_crossing_bridge_s0_translator:uav_debugaccess
	wire   [31:0] mm_clock_crossing_bridge_s0_agent_m0_address;                                        // mm_clock_crossing_bridge_s0_agent:m0_address -> mm_clock_crossing_bridge_s0_translator:uav_address
	wire    [3:0] mm_clock_crossing_bridge_s0_agent_m0_byteenable;                                     // mm_clock_crossing_bridge_s0_agent:m0_byteenable -> mm_clock_crossing_bridge_s0_translator:uav_byteenable
	wire          mm_clock_crossing_bridge_s0_agent_m0_read;                                           // mm_clock_crossing_bridge_s0_agent:m0_read -> mm_clock_crossing_bridge_s0_translator:uav_read
	wire          mm_clock_crossing_bridge_s0_agent_m0_readdatavalid;                                  // mm_clock_crossing_bridge_s0_translator:uav_readdatavalid -> mm_clock_crossing_bridge_s0_agent:m0_readdatavalid
	wire          mm_clock_crossing_bridge_s0_agent_m0_lock;                                           // mm_clock_crossing_bridge_s0_agent:m0_lock -> mm_clock_crossing_bridge_s0_translator:uav_lock
	wire   [31:0] mm_clock_crossing_bridge_s0_agent_m0_writedata;                                      // mm_clock_crossing_bridge_s0_agent:m0_writedata -> mm_clock_crossing_bridge_s0_translator:uav_writedata
	wire          mm_clock_crossing_bridge_s0_agent_m0_write;                                          // mm_clock_crossing_bridge_s0_agent:m0_write -> mm_clock_crossing_bridge_s0_translator:uav_write
	wire    [2:0] mm_clock_crossing_bridge_s0_agent_m0_burstcount;                                     // mm_clock_crossing_bridge_s0_agent:m0_burstcount -> mm_clock_crossing_bridge_s0_translator:uav_burstcount
	wire          mm_clock_crossing_bridge_s0_agent_rf_source_valid;                                   // mm_clock_crossing_bridge_s0_agent:rf_source_valid -> mm_clock_crossing_bridge_s0_agent_rsp_fifo:in_valid
	wire  [124:0] mm_clock_crossing_bridge_s0_agent_rf_source_data;                                    // mm_clock_crossing_bridge_s0_agent:rf_source_data -> mm_clock_crossing_bridge_s0_agent_rsp_fifo:in_data
	wire          mm_clock_crossing_bridge_s0_agent_rf_source_ready;                                   // mm_clock_crossing_bridge_s0_agent_rsp_fifo:in_ready -> mm_clock_crossing_bridge_s0_agent:rf_source_ready
	wire          mm_clock_crossing_bridge_s0_agent_rf_source_startofpacket;                           // mm_clock_crossing_bridge_s0_agent:rf_source_startofpacket -> mm_clock_crossing_bridge_s0_agent_rsp_fifo:in_startofpacket
	wire          mm_clock_crossing_bridge_s0_agent_rf_source_endofpacket;                             // mm_clock_crossing_bridge_s0_agent:rf_source_endofpacket -> mm_clock_crossing_bridge_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_valid;                                // mm_clock_crossing_bridge_s0_agent_rsp_fifo:out_valid -> mm_clock_crossing_bridge_s0_agent:rf_sink_valid
	wire  [124:0] mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_data;                                 // mm_clock_crossing_bridge_s0_agent_rsp_fifo:out_data -> mm_clock_crossing_bridge_s0_agent:rf_sink_data
	wire          mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_ready;                                // mm_clock_crossing_bridge_s0_agent:rf_sink_ready -> mm_clock_crossing_bridge_s0_agent_rsp_fifo:out_ready
	wire          mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_startofpacket;                        // mm_clock_crossing_bridge_s0_agent_rsp_fifo:out_startofpacket -> mm_clock_crossing_bridge_s0_agent:rf_sink_startofpacket
	wire          mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_endofpacket;                          // mm_clock_crossing_bridge_s0_agent_rsp_fifo:out_endofpacket -> mm_clock_crossing_bridge_s0_agent:rf_sink_endofpacket
	wire          mm_clock_crossing_bridge_s0_agent_rdata_fifo_src_valid;                              // mm_clock_crossing_bridge_s0_agent:rdata_fifo_src_valid -> mm_clock_crossing_bridge_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_clock_crossing_bridge_s0_agent_rdata_fifo_src_data;                               // mm_clock_crossing_bridge_s0_agent:rdata_fifo_src_data -> mm_clock_crossing_bridge_s0_agent:rdata_fifo_sink_data
	wire          mm_clock_crossing_bridge_s0_agent_rdata_fifo_src_ready;                              // mm_clock_crossing_bridge_s0_agent:rdata_fifo_sink_ready -> mm_clock_crossing_bridge_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                               // cmd_mux_001:src_valid -> mm_clock_crossing_bridge_s0_agent:cp_valid
	wire  [123:0] cmd_mux_001_src_data;                                                                // cmd_mux_001:src_data -> mm_clock_crossing_bridge_s0_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                               // mm_clock_crossing_bridge_s0_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                                             // cmd_mux_001:src_channel -> mm_clock_crossing_bridge_s0_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                       // cmd_mux_001:src_startofpacket -> mm_clock_crossing_bridge_s0_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                         // cmd_mux_001:src_endofpacket -> mm_clock_crossing_bridge_s0_agent:cp_endofpacket
	wire          master_avalon_universal_master_0_agent_cp_valid;                                     // master_avalon_universal_master_0_agent:cp_valid -> router:sink_valid
	wire  [123:0] master_avalon_universal_master_0_agent_cp_data;                                      // master_avalon_universal_master_0_agent:cp_data -> router:sink_data
	wire          master_avalon_universal_master_0_agent_cp_ready;                                     // router:sink_ready -> master_avalon_universal_master_0_agent:cp_ready
	wire          master_avalon_universal_master_0_agent_cp_startofpacket;                             // master_avalon_universal_master_0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          master_avalon_universal_master_0_agent_cp_endofpacket;                               // master_avalon_universal_master_0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                    // router:src_valid -> cmd_demux:sink_valid
	wire  [123:0] router_src_data;                                                                     // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                    // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                                  // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                            // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                              // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          multi_channel_avalon_universal_slave_0_agent_rp_valid;                               // multi_channel_avalon_universal_slave_0_agent:rp_valid -> router_001:sink_valid
	wire  [123:0] multi_channel_avalon_universal_slave_0_agent_rp_data;                                // multi_channel_avalon_universal_slave_0_agent:rp_data -> router_001:sink_data
	wire          multi_channel_avalon_universal_slave_0_agent_rp_ready;                               // router_001:sink_ready -> multi_channel_avalon_universal_slave_0_agent:rp_ready
	wire          multi_channel_avalon_universal_slave_0_agent_rp_startofpacket;                       // multi_channel_avalon_universal_slave_0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          multi_channel_avalon_universal_slave_0_agent_rp_endofpacket;                         // multi_channel_avalon_universal_slave_0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                // router_001:src_valid -> rsp_demux:sink_valid
	wire  [123:0] router_001_src_data;                                                                 // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                                // rsp_demux:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                              // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                                        // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                          // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          mm_clock_crossing_bridge_s0_agent_rp_valid;                                          // mm_clock_crossing_bridge_s0_agent:rp_valid -> router_002:sink_valid
	wire  [123:0] mm_clock_crossing_bridge_s0_agent_rp_data;                                           // mm_clock_crossing_bridge_s0_agent:rp_data -> router_002:sink_data
	wire          mm_clock_crossing_bridge_s0_agent_rp_ready;                                          // router_002:sink_ready -> mm_clock_crossing_bridge_s0_agent:rp_ready
	wire          mm_clock_crossing_bridge_s0_agent_rp_startofpacket;                                  // mm_clock_crossing_bridge_s0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          mm_clock_crossing_bridge_s0_agent_rp_endofpacket;                                    // mm_clock_crossing_bridge_s0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [123:0] router_002_src_data;                                                                 // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                                // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                              // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                                        // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                                          // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                                // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [123:0] cmd_demux_src0_data;                                                                 // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                              // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                        // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                          // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [123:0] cmd_demux_src1_data;                                                                 // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                                              // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                        // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                          // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [123:0] rsp_demux_src0_data;                                                                 // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                              // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                        // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                          // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                            // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [123:0] rsp_demux_001_src0_data;                                                             // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                            // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                                          // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                    // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                      // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket

	address_decoder_top_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (1),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) master_avalon_universal_master_0_translator (
		.clk                    (csr_clk_clk_clk),                                                                     //   input,   width = 1,                       clk.clk
		.reset                  (master_reset_reset_bridge_in_reset_reset),                                            //   input,   width = 1,                     reset.reset
		.uav_address            (master_avalon_universal_master_0_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (master_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (master_avalon_universal_master_0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (master_avalon_universal_master_0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (master_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (master_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (master_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (master_avalon_universal_master_0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (master_avalon_universal_master_0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (master_avalon_universal_master_0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (master_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (master_avalon_universal_master_0_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (master_avalon_universal_master_0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (master_avalon_universal_master_0_burstcount),                                         //   input,   width = 3,                          .burstcount
		.av_byteenable          (master_avalon_universal_master_0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (master_avalon_universal_master_0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (master_avalon_universal_master_0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (master_avalon_universal_master_0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (master_avalon_universal_master_0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (master_avalon_universal_master_0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_lock                (master_avalon_universal_master_0_lock),                                               //   input,   width = 1,                          .lock
		.av_debugaccess         (master_avalon_universal_master_0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                                // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                                // (terminated),                                        
		.av_chipselect          (1'b0),                                                                                // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                                // (terminated),                                        
		.uav_clken              (),                                                                                    // (terminated),                                        
		.av_clken               (1'b1),                                                                                // (terminated),                                        
		.uav_response           (2'b00),                                                                               // (terminated),                                        
		.av_response            (),                                                                                    // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                                // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                     // (terminated),                                        
	);

	address_decoder_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (20),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) multi_channel_avalon_universal_slave_0_translator (
		.clk                    (csr_clk_clk_clk),                                               //   input,   width = 1,                      clk.clk
		.reset                  (master_reset_reset_bridge_in_reset_reset),                      //   input,   width = 1,                    reset.reset
		.uav_address            (multi_channel_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (multi_channel_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (multi_channel_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (multi_channel_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (multi_channel_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (multi_channel_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (multi_channel_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (multi_channel_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (multi_channel_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (multi_channel_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (multi_channel_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (multi_channel_avalon_universal_slave_0_address),                //  output,  width = 20,      avalon_anti_slave_0.address
		.av_write               (multi_channel_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (multi_channel_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (multi_channel_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (multi_channel_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (multi_channel_avalon_universal_slave_0_burstcount),             //  output,   width = 3,                         .burstcount
		.av_byteenable          (multi_channel_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (multi_channel_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (multi_channel_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (multi_channel_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (multi_channel_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	address_decoder_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (17),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mm_clock_crossing_bridge_s0_translator (
		.clk                    (csr_clk_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (master_reset_reset_bridge_in_reset_reset),           //   input,   width = 1,                    reset.reset
		.uav_address            (mm_clock_crossing_bridge_s0_agent_m0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (mm_clock_crossing_bridge_s0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (mm_clock_crossing_bridge_s0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (mm_clock_crossing_bridge_s0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (mm_clock_crossing_bridge_s0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mm_clock_crossing_bridge_s0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mm_clock_crossing_bridge_s0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (mm_clock_crossing_bridge_s0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (mm_clock_crossing_bridge_s0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (mm_clock_crossing_bridge_s0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (mm_clock_crossing_bridge_s0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (mm_clock_crossing_bridge_s0_address),                //  output,  width = 17,      avalon_anti_slave_0.address
		.av_write               (mm_clock_crossing_bridge_s0_write),                  //  output,   width = 1,                         .write
		.av_read                (mm_clock_crossing_bridge_s0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (mm_clock_crossing_bridge_s0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (mm_clock_crossing_bridge_s0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (mm_clock_crossing_bridge_s0_burstcount),             //  output,   width = 1,                         .burstcount
		.av_byteenable          (mm_clock_crossing_bridge_s0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (mm_clock_crossing_bridge_s0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (mm_clock_crossing_bridge_s0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (mm_clock_crossing_bridge_s0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                   // (terminated),                                       
		.av_beginbursttransfer  (),                                                   // (terminated),                                       
		.av_writebyteenable     (),                                                   // (terminated),                                       
		.av_lock                (),                                                   // (terminated),                                       
		.av_chipselect          (),                                                   // (terminated),                                       
		.av_clken               (),                                                   // (terminated),                                       
		.uav_clken              (1'b0),                                               // (terminated),                                       
		.av_outputenable        (),                                                   // (terminated),                                       
		.uav_response           (),                                                   // (terminated),                                       
		.av_response            (2'b00),                                              // (terminated),                                       
		.uav_writeresponsevalid (),                                                   // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                // (terminated),                                       
	);

	address_decoder_top_altera_merlin_master_agent_1921_2inlndi #(
		.PKT_WUNIQUE               (110),
		.PKT_DOMAIN_H              (109),
		.PKT_DOMAIN_L              (108),
		.PKT_SNOOP_H               (107),
		.PKT_SNOOP_L               (104),
		.PKT_BARRIER_H             (103),
		.PKT_BARRIER_L             (102),
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_CACHE_H               (96),
		.PKT_CACHE_L               (93),
		.PKT_THREAD_ID_H           (89),
		.PKT_THREAD_ID_L           (89),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (88),
		.PKT_POISON_H              (111),
		.PKT_POISON_L              (111),
		.PKT_DATACHK_H             (112),
		.PKT_DATACHK_L             (112),
		.PKT_ADDRCHK_H             (113),
		.PKT_ADDRCHK_L             (113),
		.PKT_SAI_H                 (114),
		.PKT_SAI_L                 (114),
		.ST_DATA_W                 (124),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.ROLE_BASED_USER           (0)
	) master_avalon_universal_master_0_agent (
		.clk                   (csr_clk_clk_clk),                                                                     //   input,    width = 1,       clk.clk
		.reset                 (master_reset_reset_bridge_in_reset_reset),                                            //   input,    width = 1, clk_reset.reset
		.av_address            (master_avalon_universal_master_0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (master_avalon_universal_master_0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (master_avalon_universal_master_0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (master_avalon_universal_master_0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (master_avalon_universal_master_0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (master_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (master_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (master_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (master_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (master_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (master_avalon_universal_master_0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (master_avalon_universal_master_0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (master_avalon_universal_master_0_agent_cp_data),                                      //  output,  width = 124,          .data
		.cp_startofpacket      (master_avalon_universal_master_0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (master_avalon_universal_master_0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (master_avalon_universal_master_0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                   //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                    //   input,  width = 124,          .data
		.rp_channel            (rsp_mux_src_channel),                                                                 //   input,    width = 2,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                           //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                             //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                   //  output,    width = 1,          .ready
		.av_response           (),                                                                                    // (terminated),                         
		.av_writeresponsevalid ()                                                                                     // (terminated),                         
	);

	address_decoder_top_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (88),
		.PKT_POISON_H              (111),
		.PKT_POISON_L              (111),
		.PKT_DATACHK_H             (112),
		.PKT_DATACHK_L             (112),
		.PKT_SAI_H                 (114),
		.PKT_SAI_L                 (114),
		.PKT_ADDRCHK_H             (113),
		.PKT_ADDRCHK_L             (113),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) multi_channel_avalon_universal_slave_0_agent (
		.clk                     (csr_clk_clk_clk),                                                         //   input,    width = 1,             clk.clk
		.reset                   (master_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1,       clk_reset.reset
		.m0_address              (multi_channel_avalon_universal_slave_0_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (multi_channel_avalon_universal_slave_0_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (multi_channel_avalon_universal_slave_0_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (multi_channel_avalon_universal_slave_0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (multi_channel_avalon_universal_slave_0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (multi_channel_avalon_universal_slave_0_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (multi_channel_avalon_universal_slave_0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (multi_channel_avalon_universal_slave_0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (multi_channel_avalon_universal_slave_0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (multi_channel_avalon_universal_slave_0_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (multi_channel_avalon_universal_slave_0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (multi_channel_avalon_universal_slave_0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (multi_channel_avalon_universal_slave_0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (multi_channel_avalon_universal_slave_0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (multi_channel_avalon_universal_slave_0_agent_rp_data),                    //  output,  width = 124,                .data
		.rp_startofpacket        (multi_channel_avalon_universal_slave_0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                       //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                       //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                                        //   input,  width = 124,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                               //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                                 //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                     //   input,    width = 2,                .channel
		.rf_sink_ready           (multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //   input,  width = 125,                .data
		.rf_source_ready         (multi_channel_avalon_universal_slave_0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (multi_channel_avalon_universal_slave_0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (multi_channel_avalon_universal_slave_0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (multi_channel_avalon_universal_slave_0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (multi_channel_avalon_universal_slave_0_agent_rf_source_data),             //  output,  width = 125,                .data
		.rdata_fifo_sink_ready   (multi_channel_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (multi_channel_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (multi_channel_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (multi_channel_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (multi_channel_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (multi_channel_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                     // (terminated),                               
	);

	address_decoder_top_altera_avalon_sc_fifo_1931_fzgstwy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) multi_channel_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (csr_clk_clk_clk),                                                         //   input,    width = 1,       clk.clk
		.reset             (master_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.in_data           (multi_channel_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 125,        in.data
		.in_valid          (multi_channel_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (multi_channel_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (multi_channel_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (multi_channel_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 125,       out.data
		.out_valid         (multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (multi_channel_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	address_decoder_top_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (88),
		.PKT_POISON_H              (111),
		.PKT_POISON_L              (111),
		.PKT_DATACHK_H             (112),
		.PKT_DATACHK_L             (112),
		.PKT_SAI_H                 (114),
		.PKT_SAI_L                 (114),
		.PKT_ADDRCHK_H             (113),
		.PKT_ADDRCHK_L             (113),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (124),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) mm_clock_crossing_bridge_s0_agent (
		.clk                     (csr_clk_clk_clk),                                              //   input,    width = 1,             clk.clk
		.reset                   (master_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1,       clk_reset.reset
		.m0_address              (mm_clock_crossing_bridge_s0_agent_m0_address),                 //  output,   width = 32,              m0.address
		.m0_burstcount           (mm_clock_crossing_bridge_s0_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (mm_clock_crossing_bridge_s0_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (mm_clock_crossing_bridge_s0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (mm_clock_crossing_bridge_s0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (mm_clock_crossing_bridge_s0_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (mm_clock_crossing_bridge_s0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (mm_clock_crossing_bridge_s0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (mm_clock_crossing_bridge_s0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (mm_clock_crossing_bridge_s0_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (mm_clock_crossing_bridge_s0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (mm_clock_crossing_bridge_s0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (mm_clock_crossing_bridge_s0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (mm_clock_crossing_bridge_s0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (mm_clock_crossing_bridge_s0_agent_rp_data),                    //  output,  width = 124,                .data
		.rp_startofpacket        (mm_clock_crossing_bridge_s0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                        //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                        //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_001_src_data),                                         //   input,  width = 124,                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                  //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                      //   input,    width = 2,                .channel
		.rf_sink_ready           (mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_data),          //   input,  width = 125,                .data
		.rf_source_ready         (mm_clock_crossing_bridge_s0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (mm_clock_crossing_bridge_s0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (mm_clock_crossing_bridge_s0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (mm_clock_crossing_bridge_s0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (mm_clock_crossing_bridge_s0_agent_rf_source_data),             //  output,  width = 125,                .data
		.rdata_fifo_sink_ready   (mm_clock_crossing_bridge_s0_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_clock_crossing_bridge_s0_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (mm_clock_crossing_bridge_s0_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (mm_clock_crossing_bridge_s0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_clock_crossing_bridge_s0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (mm_clock_crossing_bridge_s0_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                        // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                         // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                          // (terminated),                               
	);

	address_decoder_top_altera_avalon_sc_fifo_1931_fzgstwy #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (125),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) mm_clock_crossing_bridge_s0_agent_rsp_fifo (
		.clk               (csr_clk_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset             (master_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.in_data           (mm_clock_crossing_bridge_s0_agent_rf_source_data),             //   input,  width = 125,        in.data
		.in_valid          (mm_clock_crossing_bridge_s0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (mm_clock_crossing_bridge_s0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (mm_clock_crossing_bridge_s0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (mm_clock_crossing_bridge_s0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_data),          //  output,  width = 125,       out.data
		.out_valid         (mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mm_clock_crossing_bridge_s0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated),                         
		.csr_read          (1'b0),                                                         // (terminated),                         
		.csr_write         (1'b0),                                                         // (terminated),                         
		.csr_readdata      (),                                                             // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated),                         
		.almost_full_data  (),                                                             // (terminated),                         
		.almost_empty_data (),                                                             // (terminated),                         
		.in_empty          (1'b0),                                                         // (terminated),                         
		.out_empty         (),                                                             // (terminated),                         
		.in_error          (1'b0),                                                         // (terminated),                         
		.out_error         (),                                                             // (terminated),                         
		.in_channel        (1'b0),                                                         // (terminated),                         
		.out_channel       ()                                                              // (terminated),                         
	);

	address_decoder_top_altera_merlin_router_1921_ef223yq router (
		.sink_ready         (master_avalon_universal_master_0_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (master_avalon_universal_master_0_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (master_avalon_universal_master_0_agent_cp_data),          //   input,  width = 124,          .data
		.sink_startofpacket (master_avalon_universal_master_0_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (master_avalon_universal_master_0_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (csr_clk_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (master_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                        //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                         //  output,  width = 124,          .data
		.src_channel        (router_src_channel),                                      //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                   //  output,    width = 1,          .endofpacket
	);

	address_decoder_top_altera_merlin_router_1921_2jqun3q router_001 (
		.sink_ready         (multi_channel_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (multi_channel_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (multi_channel_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 124,          .data
		.sink_startofpacket (multi_channel_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (multi_channel_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (csr_clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset              (master_reset_reset_bridge_in_reset_reset),                      //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                           //  output,  width = 124,          .data
		.src_channel        (router_001_src_channel),                                        //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	address_decoder_top_altera_merlin_router_1921_2jqun3q router_002 (
		.sink_ready         (mm_clock_crossing_bridge_s0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (mm_clock_crossing_bridge_s0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (mm_clock_crossing_bridge_s0_agent_rp_data),          //   input,  width = 124,          .data
		.sink_startofpacket (mm_clock_crossing_bridge_s0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (mm_clock_crossing_bridge_s0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (csr_clk_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (master_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                               //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                //  output,  width = 124,          .data
		.src_channel        (router_002_src_channel),                             //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	address_decoder_top_altera_merlin_demultiplexer_1921_wr6dbxi cmd_demux (
		.clk                (csr_clk_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (master_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                       //   input,    width = 2,          .channel
		.sink_data          (router_src_data),                          //   input,  width = 124,          .data
		.sink_startofpacket (router_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                     //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                     //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                      //  output,  width = 124,          .data
		.src0_channel       (cmd_demux_src0_channel),                   //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),               //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                     //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                     //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                      //  output,  width = 124,          .data
		.src1_channel       (cmd_demux_src1_channel),                   //  output,    width = 2,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),             //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	address_decoder_top_altera_merlin_multiplexer_1922_7b7u3ni cmd_mux (
		.clk                 (csr_clk_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset               (master_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                         //  output,  width = 124,          .data
		.src_channel         (cmd_mux_src_channel),                      //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                   //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                      //   input,  width = 124,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                //   input,    width = 1,          .endofpacket
	);

	address_decoder_top_altera_merlin_multiplexer_1922_7b7u3ni cmd_mux_001 (
		.clk                 (csr_clk_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset               (master_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                     //  output,  width = 124,          .data
		.src_channel         (cmd_mux_001_src_channel),                  //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                   //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src1_data),                      //   input,  width = 124,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                //   input,    width = 1,          .endofpacket
	);

	address_decoder_top_altera_merlin_demultiplexer_1921_rcor4va rsp_demux (
		.clk                (csr_clk_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (master_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                   //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                      //   input,  width = 124,          .data
		.sink_startofpacket (router_001_src_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                      //  output,  width = 124,          .data
		.src0_channel       (rsp_demux_src0_channel),                   //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                //  output,    width = 1,          .endofpacket
	);

	address_decoder_top_altera_merlin_demultiplexer_1921_rcor4va rsp_demux_001 (
		.clk                (csr_clk_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset              (master_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                   //   input,    width = 2,          .channel
		.sink_data          (router_002_src_data),                      //   input,  width = 124,          .data
		.sink_startofpacket (router_002_src_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                  //  output,  width = 124,          .data
		.src0_channel       (rsp_demux_001_src0_channel),               //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)            //  output,    width = 1,          .endofpacket
	);

	address_decoder_top_altera_merlin_multiplexer_1922_ctb2miq rsp_mux (
		.clk                 (csr_clk_clk_clk),                          //   input,    width = 1,       clk.clk
		.reset               (master_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                        //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                        //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                         //  output,  width = 124,          .data
		.src_channel         (rsp_mux_src_channel),                      //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                     //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                   //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                      //   input,  width = 124,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),               //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                 //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),               //   input,    width = 2,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                  //   input,  width = 124,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)            //   input,    width = 1,          .endofpacket
	);

endmodule
